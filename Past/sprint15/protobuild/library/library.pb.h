// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: library.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_library_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_library_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_library_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_library_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_library_2eproto;
class Author;
struct AuthorDefaultTypeInternal;
extern AuthorDefaultTypeInternal _Author_default_instance_;
class Book;
struct BookDefaultTypeInternal;
extern BookDefaultTypeInternal _Book_default_instance_;
class Date;
struct DateDefaultTypeInternal;
extern DateDefaultTypeInternal _Date_default_instance_;
class Library;
struct LibraryDefaultTypeInternal;
extern LibraryDefaultTypeInternal _Library_default_instance_;
class Publishing;
struct PublishingDefaultTypeInternal;
extern PublishingDefaultTypeInternal _Publishing_default_instance_;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Author* Arena::CreateMaybeMessage<::Author>(Arena*);
template<> ::Book* Arena::CreateMaybeMessage<::Book>(Arena*);
template<> ::Date* Arena::CreateMaybeMessage<::Date>(Arena*);
template<> ::Library* Arena::CreateMaybeMessage<::Library>(Arena*);
template<> ::Publishing* Arena::CreateMaybeMessage<::Publishing>(Arena*);
template<> ::User* Arena::CreateMaybeMessage<::User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Author final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Author) */ {
 public:
  inline Author() : Author(nullptr) {}
  ~Author() override;
  explicit PROTOBUF_CONSTEXPR Author(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Author(const Author& from);
  Author(Author&& from) noexcept
    : Author() {
    *this = ::std::move(from);
  }

  inline Author& operator=(const Author& from) {
    CopyFrom(from);
    return *this;
  }
  inline Author& operator=(Author&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Author& default_instance() {
    return *internal_default_instance();
  }
  static inline const Author* internal_default_instance() {
    return reinterpret_cast<const Author*>(
               &_Author_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Author& a, Author& b) {
    a.Swap(&b);
  }
  inline void Swap(Author* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Author* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Author* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Author>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Author& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Author& from) {
    Author::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Author* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Author";
  }
  protected:
  explicit Author(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstNameFieldNumber = 1,
    kLastNameFieldNumber = 2,
    kBirthYearFieldNumber = 3,
  };
  // string first_name = 1;
  void clear_first_name();
  const std::string& first_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_first_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_first_name();
  PROTOBUF_NODISCARD std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 2;
  void clear_last_name();
  const std::string& last_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_name();
  PROTOBUF_NODISCARD std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // uint32 birth_year = 3;
  void clear_birth_year();
  uint32_t birth_year() const;
  void set_birth_year(uint32_t value);
  private:
  uint32_t _internal_birth_year() const;
  void _internal_set_birth_year(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Author)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
    uint32_t birth_year_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

class Publishing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Publishing) */ {
 public:
  inline Publishing() : Publishing(nullptr) {}
  ~Publishing() override;
  explicit PROTOBUF_CONSTEXPR Publishing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Publishing(const Publishing& from);
  Publishing(Publishing&& from) noexcept
    : Publishing() {
    *this = ::std::move(from);
  }

  inline Publishing& operator=(const Publishing& from) {
    CopyFrom(from);
    return *this;
  }
  inline Publishing& operator=(Publishing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Publishing& default_instance() {
    return *internal_default_instance();
  }
  static inline const Publishing* internal_default_instance() {
    return reinterpret_cast<const Publishing*>(
               &_Publishing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Publishing& a, Publishing& b) {
    a.Swap(&b);
  }
  inline void Swap(Publishing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Publishing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Publishing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Publishing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Publishing& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Publishing& from) {
    Publishing::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Publishing* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Publishing";
  }
  protected:
  explicit Publishing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAddressFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string address = 2;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:Publishing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

class Date final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Date) */ {
 public:
  inline Date() : Date(nullptr) {}
  ~Date() override;
  explicit PROTOBUF_CONSTEXPR Date(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Date(const Date& from);
  Date(Date&& from) noexcept
    : Date() {
    *this = ::std::move(from);
  }

  inline Date& operator=(const Date& from) {
    CopyFrom(from);
    return *this;
  }
  inline Date& operator=(Date&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Date& default_instance() {
    return *internal_default_instance();
  }
  static inline const Date* internal_default_instance() {
    return reinterpret_cast<const Date*>(
               &_Date_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Date& a, Date& b) {
    a.Swap(&b);
  }
  inline void Swap(Date* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Date* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Date* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Date>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Date& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Date& from) {
    Date::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Date* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Date";
  }
  protected:
  explicit Date(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYearFieldNumber = 1,
    kMonthFieldNumber = 2,
    kDayFieldNumber = 3,
  };
  // uint32 year = 1;
  void clear_year();
  uint32_t year() const;
  void set_year(uint32_t value);
  private:
  uint32_t _internal_year() const;
  void _internal_set_year(uint32_t value);
  public:

  // uint32 month = 2;
  void clear_month();
  uint32_t month() const;
  void set_month(uint32_t value);
  private:
  uint32_t _internal_month() const;
  void _internal_set_month(uint32_t value);
  public:

  // uint32 day = 3;
  void clear_day();
  uint32_t day() const;
  void set_day(uint32_t value);
  private:
  uint32_t _internal_day() const;
  void _internal_set_day(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Date)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t year_;
    uint32_t month_;
    uint32_t day_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

class User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() override;
  explicit PROTOBUF_CONSTEXPR User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const User& from) {
    User::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kRegistrationDateFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Date registration_date = 3;
  bool has_registration_date() const;
  private:
  bool _internal_has_registration_date() const;
  public:
  void clear_registration_date();
  const ::Date& registration_date() const;
  PROTOBUF_NODISCARD ::Date* release_registration_date();
  ::Date* mutable_registration_date();
  void set_allocated_registration_date(::Date* registration_date);
  private:
  const ::Date& _internal_registration_date() const;
  ::Date* _internal_mutable_registration_date();
  public:
  void unsafe_arena_set_allocated_registration_date(
      ::Date* registration_date);
  ::Date* unsafe_arena_release_registration_date();

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::Date* registration_date_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

class Book final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Book) */ {
 public:
  inline Book() : Book(nullptr) {}
  ~Book() override;
  explicit PROTOBUF_CONSTEXPR Book(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Book(const Book& from);
  Book(Book&& from) noexcept
    : Book() {
    *this = ::std::move(from);
  }

  inline Book& operator=(const Book& from) {
    CopyFrom(from);
    return *this;
  }
  inline Book& operator=(Book&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Book& default_instance() {
    return *internal_default_instance();
  }
  static inline const Book* internal_default_instance() {
    return reinterpret_cast<const Book*>(
               &_Book_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Book& a, Book& b) {
    a.Swap(&b);
  }
  inline void Swap(Book* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Book* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Book* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Book>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Book& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Book& from) {
    Book::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Book* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Book";
  }
  protected:
  explicit Book(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorFieldNumber = 2,
    kHolderFieldNumber = 7,
    kNameFieldNumber = 4,
    kPublishingFieldNumber = 1,
    kBorrowDateFieldNumber = 5,
    kReturnDateFieldNumber = 6,
    kYearFieldNumber = 3,
  };
  // repeated .Author author = 2;
  int author_size() const;
  private:
  int _internal_author_size() const;
  public:
  void clear_author();
  ::Author* mutable_author(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Author >*
      mutable_author();
  private:
  const ::Author& _internal_author(int index) const;
  ::Author* _internal_add_author();
  public:
  const ::Author& author(int index) const;
  ::Author* add_author();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Author >&
      author() const;

  // repeated uint32 holder = 7;
  int holder_size() const;
  private:
  int _internal_holder_size() const;
  public:
  void clear_holder();
  private:
  uint32_t _internal_holder(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_holder() const;
  void _internal_add_holder(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_holder();
  public:
  uint32_t holder(int index) const;
  void set_holder(int index, uint32_t value);
  void add_holder(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      holder() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_holder();

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Publishing publishing = 1;
  bool has_publishing() const;
  private:
  bool _internal_has_publishing() const;
  public:
  void clear_publishing();
  const ::Publishing& publishing() const;
  PROTOBUF_NODISCARD ::Publishing* release_publishing();
  ::Publishing* mutable_publishing();
  void set_allocated_publishing(::Publishing* publishing);
  private:
  const ::Publishing& _internal_publishing() const;
  ::Publishing* _internal_mutable_publishing();
  public:
  void unsafe_arena_set_allocated_publishing(
      ::Publishing* publishing);
  ::Publishing* unsafe_arena_release_publishing();

  // .Date borrow_date = 5;
  bool has_borrow_date() const;
  private:
  bool _internal_has_borrow_date() const;
  public:
  void clear_borrow_date();
  const ::Date& borrow_date() const;
  PROTOBUF_NODISCARD ::Date* release_borrow_date();
  ::Date* mutable_borrow_date();
  void set_allocated_borrow_date(::Date* borrow_date);
  private:
  const ::Date& _internal_borrow_date() const;
  ::Date* _internal_mutable_borrow_date();
  public:
  void unsafe_arena_set_allocated_borrow_date(
      ::Date* borrow_date);
  ::Date* unsafe_arena_release_borrow_date();

  // .Date return_date = 6;
  bool has_return_date() const;
  private:
  bool _internal_has_return_date() const;
  public:
  void clear_return_date();
  const ::Date& return_date() const;
  PROTOBUF_NODISCARD ::Date* release_return_date();
  ::Date* mutable_return_date();
  void set_allocated_return_date(::Date* return_date);
  private:
  const ::Date& _internal_return_date() const;
  ::Date* _internal_mutable_return_date();
  public:
  void unsafe_arena_set_allocated_return_date(
      ::Date* return_date);
  ::Date* unsafe_arena_release_return_date();

  // uint32 year = 3;
  void clear_year();
  uint32_t year() const;
  void set_year(uint32_t value);
  private:
  uint32_t _internal_year() const;
  void _internal_set_year(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Book)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Author > author_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > holder_;
    mutable std::atomic<int> _holder_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::Publishing* publishing_;
    ::Date* borrow_date_;
    ::Date* return_date_;
    uint32_t year_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

class Library final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Library) */ {
 public:
  inline Library() : Library(nullptr) {}
  ~Library() override;
  explicit PROTOBUF_CONSTEXPR Library(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Library(const Library& from);
  Library(Library&& from) noexcept
    : Library() {
    *this = ::std::move(from);
  }

  inline Library& operator=(const Library& from) {
    CopyFrom(from);
    return *this;
  }
  inline Library& operator=(Library&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Library& default_instance() {
    return *internal_default_instance();
  }
  static inline const Library* internal_default_instance() {
    return reinterpret_cast<const Library*>(
               &_Library_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Library& a, Library& b) {
    a.Swap(&b);
  }
  inline void Swap(Library* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Library* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Library* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Library>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Library& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Library& from) {
    Library::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Library* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Library";
  }
  protected:
  explicit Library(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookFieldNumber = 1,
    kReaderFieldNumber = 2,
  };
  // repeated .Book book = 1;
  int book_size() const;
  private:
  int _internal_book_size() const;
  public:
  void clear_book();
  ::Book* mutable_book(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Book >*
      mutable_book();
  private:
  const ::Book& _internal_book(int index) const;
  ::Book* _internal_add_book();
  public:
  const ::Book& book(int index) const;
  ::Book* add_book();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Book >&
      book() const;

  // repeated .User reader = 2;
  int reader_size() const;
  private:
  int _internal_reader_size() const;
  public:
  void clear_reader();
  ::User* mutable_reader(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::User >*
      mutable_reader();
  private:
  const ::User& _internal_reader(int index) const;
  ::User* _internal_add_reader();
  public:
  const ::User& reader(int index) const;
  ::User* add_reader();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::User >&
      reader() const;

  // @@protoc_insertion_point(class_scope:Library)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Book > book_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::User > reader_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Author

// string first_name = 1;
inline void Author::clear_first_name() {
  _impl_.first_name_.ClearToEmpty();
}
inline const std::string& Author::first_name() const {
  // @@protoc_insertion_point(field_get:Author.first_name)
  return _internal_first_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Author::set_first_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.first_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Author.first_name)
}
inline std::string* Author::mutable_first_name() {
  std::string* _s = _internal_mutable_first_name();
  // @@protoc_insertion_point(field_mutable:Author.first_name)
  return _s;
}
inline const std::string& Author::_internal_first_name() const {
  return _impl_.first_name_.Get();
}
inline void Author::_internal_set_first_name(const std::string& value) {
  
  _impl_.first_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Author::_internal_mutable_first_name() {
  
  return _impl_.first_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Author::release_first_name() {
  // @@protoc_insertion_point(field_release:Author.first_name)
  return _impl_.first_name_.Release();
}
inline void Author::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  _impl_.first_name_.SetAllocated(first_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.first_name_.IsDefault()) {
    _impl_.first_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Author.first_name)
}

// string last_name = 2;
inline void Author::clear_last_name() {
  _impl_.last_name_.ClearToEmpty();
}
inline const std::string& Author::last_name() const {
  // @@protoc_insertion_point(field_get:Author.last_name)
  return _internal_last_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Author::set_last_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.last_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Author.last_name)
}
inline std::string* Author::mutable_last_name() {
  std::string* _s = _internal_mutable_last_name();
  // @@protoc_insertion_point(field_mutable:Author.last_name)
  return _s;
}
inline const std::string& Author::_internal_last_name() const {
  return _impl_.last_name_.Get();
}
inline void Author::_internal_set_last_name(const std::string& value) {
  
  _impl_.last_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Author::_internal_mutable_last_name() {
  
  return _impl_.last_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Author::release_last_name() {
  // @@protoc_insertion_point(field_release:Author.last_name)
  return _impl_.last_name_.Release();
}
inline void Author::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  _impl_.last_name_.SetAllocated(last_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.last_name_.IsDefault()) {
    _impl_.last_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Author.last_name)
}

// uint32 birth_year = 3;
inline void Author::clear_birth_year() {
  _impl_.birth_year_ = 0u;
}
inline uint32_t Author::_internal_birth_year() const {
  return _impl_.birth_year_;
}
inline uint32_t Author::birth_year() const {
  // @@protoc_insertion_point(field_get:Author.birth_year)
  return _internal_birth_year();
}
inline void Author::_internal_set_birth_year(uint32_t value) {
  
  _impl_.birth_year_ = value;
}
inline void Author::set_birth_year(uint32_t value) {
  _internal_set_birth_year(value);
  // @@protoc_insertion_point(field_set:Author.birth_year)
}

// -------------------------------------------------------------------

// Publishing

// string name = 1;
inline void Publishing::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Publishing::name() const {
  // @@protoc_insertion_point(field_get:Publishing.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Publishing::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Publishing.name)
}
inline std::string* Publishing::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Publishing.name)
  return _s;
}
inline const std::string& Publishing::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Publishing::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Publishing::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Publishing::release_name() {
  // @@protoc_insertion_point(field_release:Publishing.name)
  return _impl_.name_.Release();
}
inline void Publishing::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Publishing.name)
}

// string address = 2;
inline void Publishing::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& Publishing::address() const {
  // @@protoc_insertion_point(field_get:Publishing.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Publishing::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Publishing.address)
}
inline std::string* Publishing::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:Publishing.address)
  return _s;
}
inline const std::string& Publishing::_internal_address() const {
  return _impl_.address_.Get();
}
inline void Publishing::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* Publishing::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* Publishing::release_address() {
  // @@protoc_insertion_point(field_release:Publishing.address)
  return _impl_.address_.Release();
}
inline void Publishing::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Publishing.address)
}

// -------------------------------------------------------------------

// Date

// uint32 year = 1;
inline void Date::clear_year() {
  _impl_.year_ = 0u;
}
inline uint32_t Date::_internal_year() const {
  return _impl_.year_;
}
inline uint32_t Date::year() const {
  // @@protoc_insertion_point(field_get:Date.year)
  return _internal_year();
}
inline void Date::_internal_set_year(uint32_t value) {
  
  _impl_.year_ = value;
}
inline void Date::set_year(uint32_t value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:Date.year)
}

// uint32 month = 2;
inline void Date::clear_month() {
  _impl_.month_ = 0u;
}
inline uint32_t Date::_internal_month() const {
  return _impl_.month_;
}
inline uint32_t Date::month() const {
  // @@protoc_insertion_point(field_get:Date.month)
  return _internal_month();
}
inline void Date::_internal_set_month(uint32_t value) {
  
  _impl_.month_ = value;
}
inline void Date::set_month(uint32_t value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:Date.month)
}

// uint32 day = 3;
inline void Date::clear_day() {
  _impl_.day_ = 0u;
}
inline uint32_t Date::_internal_day() const {
  return _impl_.day_;
}
inline uint32_t Date::day() const {
  // @@protoc_insertion_point(field_get:Date.day)
  return _internal_day();
}
inline void Date::_internal_set_day(uint32_t value) {
  
  _impl_.day_ = value;
}
inline void Date::set_day(uint32_t value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:Date.day)
}

// -------------------------------------------------------------------

// User

// uint32 id = 1;
inline void User::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t User::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t User::id() const {
  // @@protoc_insertion_point(field_get:User.id)
  return _internal_id();
}
inline void User::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void User::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:User.id)
}

// string name = 2;
inline void User::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& User::name() const {
  // @@protoc_insertion_point(field_get:User.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.name)
}
inline std::string* User::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:User.name)
  return _s;
}
inline const std::string& User::_internal_name() const {
  return _impl_.name_.Get();
}
inline void User::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:User.name)
  return _impl_.name_.Release();
}
inline void User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.name)
}

// .Date registration_date = 3;
inline bool User::_internal_has_registration_date() const {
  return this != internal_default_instance() && _impl_.registration_date_ != nullptr;
}
inline bool User::has_registration_date() const {
  return _internal_has_registration_date();
}
inline void User::clear_registration_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.registration_date_ != nullptr) {
    delete _impl_.registration_date_;
  }
  _impl_.registration_date_ = nullptr;
}
inline const ::Date& User::_internal_registration_date() const {
  const ::Date* p = _impl_.registration_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::Date&>(
      ::_Date_default_instance_);
}
inline const ::Date& User::registration_date() const {
  // @@protoc_insertion_point(field_get:User.registration_date)
  return _internal_registration_date();
}
inline void User::unsafe_arena_set_allocated_registration_date(
    ::Date* registration_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.registration_date_);
  }
  _impl_.registration_date_ = registration_date;
  if (registration_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:User.registration_date)
}
inline ::Date* User::release_registration_date() {
  
  ::Date* temp = _impl_.registration_date_;
  _impl_.registration_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Date* User::unsafe_arena_release_registration_date() {
  // @@protoc_insertion_point(field_release:User.registration_date)
  
  ::Date* temp = _impl_.registration_date_;
  _impl_.registration_date_ = nullptr;
  return temp;
}
inline ::Date* User::_internal_mutable_registration_date() {
  
  if (_impl_.registration_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::Date>(GetArenaForAllocation());
    _impl_.registration_date_ = p;
  }
  return _impl_.registration_date_;
}
inline ::Date* User::mutable_registration_date() {
  ::Date* _msg = _internal_mutable_registration_date();
  // @@protoc_insertion_point(field_mutable:User.registration_date)
  return _msg;
}
inline void User::set_allocated_registration_date(::Date* registration_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.registration_date_;
  }
  if (registration_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(registration_date);
    if (message_arena != submessage_arena) {
      registration_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, registration_date, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.registration_date_ = registration_date;
  // @@protoc_insertion_point(field_set_allocated:User.registration_date)
}

// -------------------------------------------------------------------

// Book

// .Publishing publishing = 1;
inline bool Book::_internal_has_publishing() const {
  return this != internal_default_instance() && _impl_.publishing_ != nullptr;
}
inline bool Book::has_publishing() const {
  return _internal_has_publishing();
}
inline void Book::clear_publishing() {
  if (GetArenaForAllocation() == nullptr && _impl_.publishing_ != nullptr) {
    delete _impl_.publishing_;
  }
  _impl_.publishing_ = nullptr;
}
inline const ::Publishing& Book::_internal_publishing() const {
  const ::Publishing* p = _impl_.publishing_;
  return p != nullptr ? *p : reinterpret_cast<const ::Publishing&>(
      ::_Publishing_default_instance_);
}
inline const ::Publishing& Book::publishing() const {
  // @@protoc_insertion_point(field_get:Book.publishing)
  return _internal_publishing();
}
inline void Book::unsafe_arena_set_allocated_publishing(
    ::Publishing* publishing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.publishing_);
  }
  _impl_.publishing_ = publishing;
  if (publishing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Book.publishing)
}
inline ::Publishing* Book::release_publishing() {
  
  ::Publishing* temp = _impl_.publishing_;
  _impl_.publishing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Publishing* Book::unsafe_arena_release_publishing() {
  // @@protoc_insertion_point(field_release:Book.publishing)
  
  ::Publishing* temp = _impl_.publishing_;
  _impl_.publishing_ = nullptr;
  return temp;
}
inline ::Publishing* Book::_internal_mutable_publishing() {
  
  if (_impl_.publishing_ == nullptr) {
    auto* p = CreateMaybeMessage<::Publishing>(GetArenaForAllocation());
    _impl_.publishing_ = p;
  }
  return _impl_.publishing_;
}
inline ::Publishing* Book::mutable_publishing() {
  ::Publishing* _msg = _internal_mutable_publishing();
  // @@protoc_insertion_point(field_mutable:Book.publishing)
  return _msg;
}
inline void Book::set_allocated_publishing(::Publishing* publishing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.publishing_;
  }
  if (publishing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(publishing);
    if (message_arena != submessage_arena) {
      publishing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publishing, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.publishing_ = publishing;
  // @@protoc_insertion_point(field_set_allocated:Book.publishing)
}

// repeated .Author author = 2;
inline int Book::_internal_author_size() const {
  return _impl_.author_.size();
}
inline int Book::author_size() const {
  return _internal_author_size();
}
inline void Book::clear_author() {
  _impl_.author_.Clear();
}
inline ::Author* Book::mutable_author(int index) {
  // @@protoc_insertion_point(field_mutable:Book.author)
  return _impl_.author_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Author >*
Book::mutable_author() {
  // @@protoc_insertion_point(field_mutable_list:Book.author)
  return &_impl_.author_;
}
inline const ::Author& Book::_internal_author(int index) const {
  return _impl_.author_.Get(index);
}
inline const ::Author& Book::author(int index) const {
  // @@protoc_insertion_point(field_get:Book.author)
  return _internal_author(index);
}
inline ::Author* Book::_internal_add_author() {
  return _impl_.author_.Add();
}
inline ::Author* Book::add_author() {
  ::Author* _add = _internal_add_author();
  // @@protoc_insertion_point(field_add:Book.author)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Author >&
Book::author() const {
  // @@protoc_insertion_point(field_list:Book.author)
  return _impl_.author_;
}

// uint32 year = 3;
inline void Book::clear_year() {
  _impl_.year_ = 0u;
}
inline uint32_t Book::_internal_year() const {
  return _impl_.year_;
}
inline uint32_t Book::year() const {
  // @@protoc_insertion_point(field_get:Book.year)
  return _internal_year();
}
inline void Book::_internal_set_year(uint32_t value) {
  
  _impl_.year_ = value;
}
inline void Book::set_year(uint32_t value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:Book.year)
}

// string name = 4;
inline void Book::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Book::name() const {
  // @@protoc_insertion_point(field_get:Book.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Book::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Book.name)
}
inline std::string* Book::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Book.name)
  return _s;
}
inline const std::string& Book::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Book::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Book::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Book::release_name() {
  // @@protoc_insertion_point(field_release:Book.name)
  return _impl_.name_.Release();
}
inline void Book::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Book.name)
}

// .Date borrow_date = 5;
inline bool Book::_internal_has_borrow_date() const {
  return this != internal_default_instance() && _impl_.borrow_date_ != nullptr;
}
inline bool Book::has_borrow_date() const {
  return _internal_has_borrow_date();
}
inline void Book::clear_borrow_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.borrow_date_ != nullptr) {
    delete _impl_.borrow_date_;
  }
  _impl_.borrow_date_ = nullptr;
}
inline const ::Date& Book::_internal_borrow_date() const {
  const ::Date* p = _impl_.borrow_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::Date&>(
      ::_Date_default_instance_);
}
inline const ::Date& Book::borrow_date() const {
  // @@protoc_insertion_point(field_get:Book.borrow_date)
  return _internal_borrow_date();
}
inline void Book::unsafe_arena_set_allocated_borrow_date(
    ::Date* borrow_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.borrow_date_);
  }
  _impl_.borrow_date_ = borrow_date;
  if (borrow_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Book.borrow_date)
}
inline ::Date* Book::release_borrow_date() {
  
  ::Date* temp = _impl_.borrow_date_;
  _impl_.borrow_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Date* Book::unsafe_arena_release_borrow_date() {
  // @@protoc_insertion_point(field_release:Book.borrow_date)
  
  ::Date* temp = _impl_.borrow_date_;
  _impl_.borrow_date_ = nullptr;
  return temp;
}
inline ::Date* Book::_internal_mutable_borrow_date() {
  
  if (_impl_.borrow_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::Date>(GetArenaForAllocation());
    _impl_.borrow_date_ = p;
  }
  return _impl_.borrow_date_;
}
inline ::Date* Book::mutable_borrow_date() {
  ::Date* _msg = _internal_mutable_borrow_date();
  // @@protoc_insertion_point(field_mutable:Book.borrow_date)
  return _msg;
}
inline void Book::set_allocated_borrow_date(::Date* borrow_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.borrow_date_;
  }
  if (borrow_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(borrow_date);
    if (message_arena != submessage_arena) {
      borrow_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, borrow_date, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.borrow_date_ = borrow_date;
  // @@protoc_insertion_point(field_set_allocated:Book.borrow_date)
}

// .Date return_date = 6;
inline bool Book::_internal_has_return_date() const {
  return this != internal_default_instance() && _impl_.return_date_ != nullptr;
}
inline bool Book::has_return_date() const {
  return _internal_has_return_date();
}
inline void Book::clear_return_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.return_date_ != nullptr) {
    delete _impl_.return_date_;
  }
  _impl_.return_date_ = nullptr;
}
inline const ::Date& Book::_internal_return_date() const {
  const ::Date* p = _impl_.return_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::Date&>(
      ::_Date_default_instance_);
}
inline const ::Date& Book::return_date() const {
  // @@protoc_insertion_point(field_get:Book.return_date)
  return _internal_return_date();
}
inline void Book::unsafe_arena_set_allocated_return_date(
    ::Date* return_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.return_date_);
  }
  _impl_.return_date_ = return_date;
  if (return_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Book.return_date)
}
inline ::Date* Book::release_return_date() {
  
  ::Date* temp = _impl_.return_date_;
  _impl_.return_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Date* Book::unsafe_arena_release_return_date() {
  // @@protoc_insertion_point(field_release:Book.return_date)
  
  ::Date* temp = _impl_.return_date_;
  _impl_.return_date_ = nullptr;
  return temp;
}
inline ::Date* Book::_internal_mutable_return_date() {
  
  if (_impl_.return_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::Date>(GetArenaForAllocation());
    _impl_.return_date_ = p;
  }
  return _impl_.return_date_;
}
inline ::Date* Book::mutable_return_date() {
  ::Date* _msg = _internal_mutable_return_date();
  // @@protoc_insertion_point(field_mutable:Book.return_date)
  return _msg;
}
inline void Book::set_allocated_return_date(::Date* return_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.return_date_;
  }
  if (return_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(return_date);
    if (message_arena != submessage_arena) {
      return_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, return_date, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.return_date_ = return_date;
  // @@protoc_insertion_point(field_set_allocated:Book.return_date)
}

// repeated uint32 holder = 7;
inline int Book::_internal_holder_size() const {
  return _impl_.holder_.size();
}
inline int Book::holder_size() const {
  return _internal_holder_size();
}
inline void Book::clear_holder() {
  _impl_.holder_.Clear();
}
inline uint32_t Book::_internal_holder(int index) const {
  return _impl_.holder_.Get(index);
}
inline uint32_t Book::holder(int index) const {
  // @@protoc_insertion_point(field_get:Book.holder)
  return _internal_holder(index);
}
inline void Book::set_holder(int index, uint32_t value) {
  _impl_.holder_.Set(index, value);
  // @@protoc_insertion_point(field_set:Book.holder)
}
inline void Book::_internal_add_holder(uint32_t value) {
  _impl_.holder_.Add(value);
}
inline void Book::add_holder(uint32_t value) {
  _internal_add_holder(value);
  // @@protoc_insertion_point(field_add:Book.holder)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Book::_internal_holder() const {
  return _impl_.holder_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Book::holder() const {
  // @@protoc_insertion_point(field_list:Book.holder)
  return _internal_holder();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Book::_internal_mutable_holder() {
  return &_impl_.holder_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Book::mutable_holder() {
  // @@protoc_insertion_point(field_mutable_list:Book.holder)
  return _internal_mutable_holder();
}

// -------------------------------------------------------------------

// Library

// repeated .Book book = 1;
inline int Library::_internal_book_size() const {
  return _impl_.book_.size();
}
inline int Library::book_size() const {
  return _internal_book_size();
}
inline void Library::clear_book() {
  _impl_.book_.Clear();
}
inline ::Book* Library::mutable_book(int index) {
  // @@protoc_insertion_point(field_mutable:Library.book)
  return _impl_.book_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Book >*
Library::mutable_book() {
  // @@protoc_insertion_point(field_mutable_list:Library.book)
  return &_impl_.book_;
}
inline const ::Book& Library::_internal_book(int index) const {
  return _impl_.book_.Get(index);
}
inline const ::Book& Library::book(int index) const {
  // @@protoc_insertion_point(field_get:Library.book)
  return _internal_book(index);
}
inline ::Book* Library::_internal_add_book() {
  return _impl_.book_.Add();
}
inline ::Book* Library::add_book() {
  ::Book* _add = _internal_add_book();
  // @@protoc_insertion_point(field_add:Library.book)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Book >&
Library::book() const {
  // @@protoc_insertion_point(field_list:Library.book)
  return _impl_.book_;
}

// repeated .User reader = 2;
inline int Library::_internal_reader_size() const {
  return _impl_.reader_.size();
}
inline int Library::reader_size() const {
  return _internal_reader_size();
}
inline void Library::clear_reader() {
  _impl_.reader_.Clear();
}
inline ::User* Library::mutable_reader(int index) {
  // @@protoc_insertion_point(field_mutable:Library.reader)
  return _impl_.reader_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::User >*
Library::mutable_reader() {
  // @@protoc_insertion_point(field_mutable_list:Library.reader)
  return &_impl_.reader_;
}
inline const ::User& Library::_internal_reader(int index) const {
  return _impl_.reader_.Get(index);
}
inline const ::User& Library::reader(int index) const {
  // @@protoc_insertion_point(field_get:Library.reader)
  return _internal_reader(index);
}
inline ::User* Library::_internal_add_reader() {
  return _impl_.reader_.Add();
}
inline ::User* Library::add_reader() {
  ::User* _add = _internal_add_reader();
  // @@protoc_insertion_point(field_add:Library.reader)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::User >&
Library::reader() const {
  // @@protoc_insertion_point(field_list:Library.reader)
  return _impl_.reader_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_library_2eproto
